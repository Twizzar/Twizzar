<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:nodes="clr-namespace:Twizzar.Design.Ui.Interfaces.ViewModels.FixtureItem.Nodes;assembly=Twizzar.Design.Ui.Interfaces"
    xmlns:view="clr-namespace:Twizzar.Design.Infrastructure.VisualStudio.Ui.View;assembly=Twizzar.Design.Infrastructure.VisualStudio.Ui"
    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml" />
        <ResourceDictionary Source="Glyphs.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibility" />

    <!--
        It is not possible to set a style for all elements.
        The only way to do this is to define a base style and every style defined needs to be based on this.
    -->
    <Style x:Key="ControlBaseStyle" TargetType="FrameworkElement">
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style BasedOn="{StaticResource ControlBaseStyle}" TargetType="Button" />
    <Style BasedOn="{StaticResource ControlBaseStyle}" TargetType="Image" />
    <Style BasedOn="{StaticResource ControlBaseStyle}" TargetType="ItemsControl" />

    <Style BasedOn="{StaticResource ControlBaseStyle}" TargetType="TextBlock">
        <Setter Property="Background" Value="{DynamicResource {x:Static view:ViColors.BackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static view:ViColors.TextBrush}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static view:ViFonts.FontSizeKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static view:ViFonts.FontFamilyKey}}" />
    </Style>

    <Style BasedOn="{StaticResource ControlBaseStyle}" TargetType="RichTextBox">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource CaretBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style
        x:Key="GridSplitterStyle"
        BasedOn="{StaticResource ControlBaseStyle}"
        TargetType="GridSplitter">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Width" Value="5" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <Style
        x:Key="TreeViewStyle"
        BasedOn="{StaticResource ControlBaseStyle}"
        TargetType="TreeView">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static view:ViColors.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource {x:Static view:ViColors.BackgroundBrush}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static view:ViFonts.FontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static view:ViFonts.FontSizeKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="FlowDocument">
        <Setter Property="Background" Value="{DynamicResource {x:Static view:ViColors.BackgroundBrush}}" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static view:ViFonts.FontSizeKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static view:ViColors.TextBrush}}" />
        <Setter Property="Border.Background" Value="Transparent" />
        <Setter Property="Border.BorderThickness" Value="0" />
    </Style>

    <Style
        x:Key="TreeViewItemBaseStyle"
        BasedOn="{StaticResource ControlBaseStyle}"
        TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
    </Style>

    <Style
        x:Key="ExpandCollapseToggleStyle"
        BasedOn="{StaticResource ControlBaseStyle}"
        TargetType="ToggleButton">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                        x:Name="ExpandGird"
                        Width="15"
                        Height="13"
                        Background="Transparent">
                        <Viewbox
                            x:Name="GlyphCollapsed"
                            Width="16"
                            Height="16"
                            Visibility="Visible">
                            <Rectangle Style="{StaticResource GlyphRight16xRect}" />
                        </Viewbox>
                        <Viewbox
                            x:Name="GlyphExpanded"
                            Width="16"
                            Height="16"
                            Visibility="Collapsed">
                            <Rectangle Style="{StaticResource ScrollbarArrowsDownRight16xRect}" />
                        </Viewbox>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphExpanded" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphCollapsed" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="AdornmentExpanderStyle"
        BasedOn="{StaticResource ControlBaseStyle}"
        TargetType="ToggleButton">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                        Width="15"
                        Height="13"
                        Background="Transparent">
                        <Viewbox
                            x:Name="GlyphCollapsed"
                            Width="14"
                            Height="14"
                            Visibility="Visible">
                            <Rectangle Style="{StaticResource GlyphLeft16xRect}" />
                        </Viewbox>
                        <Viewbox
                            x:Name="GlyphExpanded"
                            Width="14"
                            Height="14"
                            Visibility="Collapsed">
                            <Rectangle Style="{StaticResource GlyphDown16xRect}" />
                        </Viewbox>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphExpanded" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphCollapsed" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemFocusVisual" BasedOn="{StaticResource ControlBaseStyle}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="0,0,0,0"
                            Opacity="0"
                            Stroke="Black"
                            StrokeDashArray="1 2"
                            StrokeThickness="5" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="CustomTreeViewItemStyle"
        d:DataContext="{d:DesignInstance nodes:IFixtureItemNodeViewModel}"
        BasedOn="{StaticResource TreeViewItemBaseStyle}"
        TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="16" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton
                            x:Name="Expander"
                            Grid.Row="0"
                            Grid.Column="0"
                            ClickMode="Press"
                            Command="{Binding ExpandChildMemberDefinition}"
                            IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ExpandCollapseToggleStyle}"
                            Visibility="{Binding FixtureItemInformation.CanBeExpanded, Converter={StaticResource BooleanToVisibility}}" />
                        <Border
                            x:Name="Bd"
                            Grid.Row="0"
                            Grid.Column="1"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter
                                x:Name="PART_Header"
                                HorizontalAlignment="Stretch"
                                ContentSource="Header" />
                        </Border>
                        <ItemsPresenter
                            x:Name="ItemsHost"
                            Grid.Row="1"
                            Grid.Column="1"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="CustomTreeViewListItemStyle"
        BasedOn="{StaticResource TreeViewItemBaseStyle}"
        TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static view:ViColors.TextBrush}}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <Border
                            x:Name="Bd"
                            Height="16"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter
                                x:Name="PART_Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                ContentSource="Header" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>