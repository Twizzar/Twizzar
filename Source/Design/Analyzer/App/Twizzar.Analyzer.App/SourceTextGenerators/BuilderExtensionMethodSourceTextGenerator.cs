using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Twizzar.Analyzer2022.App.Interfaces;
using Twizzar.Design.Shared.CoreInterfaces.Name;
using Twizzar.Design.Shared.Infrastructure.Discovery;
using Twizzar.Design.Shared.Infrastructure.Extension;
using Twizzar.SharedKernel.NLog.Logging;
using ViCommon.Functional.Monads.ResultMonad;

namespace Twizzar.Analyzer.SourceTextGenerators
{
    /// <inheritdoc cref="IBuilderExtensionMethodSourceTextGenerator" />
    public class BuilderExtensionMethodSourceTextGenerator : IBuilderExtensionMethodSourceTextGenerator
    {
        #region members

        /// <inheritdoc />
        public IResult<string, Failure> GenerateClass(
            IEnumerable<ItemBuilderCreationInformation> creationInformation,
            CancellationToken cancellationToken)
        {
            var sb = new StringBuilder();

            foreach (var information in creationInformation)
            {
                var (_, _, symbol, pathProviderName) = information;

                if (cancellationToken.IsCancellationRequested)
                {
                    return Result.Failure<string, OperationCanceledFailure>(new OperationCanceledFailure());
                }

                try
                {
                    var accessModifierResult = RoslynHelper.GetAccessModifierToken(symbol);

                    if (accessModifierResult.IsFailure)
                    {
                        continue;
                    }

                    var accessModifier = accessModifierResult.GetSuccessUnsafe();

                    var tfn = symbol.GetTypeFullName();
                    var fixtureTypeFullName = tfn.GetFriendlyCSharpFullName();

                    sb.Append(
                        $@"
{accessModifier} static ItemBuilder<{fixtureTypeFullName}> With(
    this ItemBuilder<{fixtureTypeFullName}> builder,
    Func<{pathProviderName}, MemberConfig<{fixtureTypeFullName}>> func) =>
        (ItemBuilder<{fixtureTypeFullName}>)ItemBuilderHelperMethods.With(builder, func);
");
                }
                catch (Exception e)
                {
                    this.Log(e);
                }
            }

            var code = @$"
// Auto-generated code
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using Twizzar.Fixture.Member;
using Twizzar.Fixture.Utils;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

namespace Twizzar.Fixture
{{
    public static class ItemBuilderExtensionMethods
    {{
        {sb}
    }}
}}          
";

            return Result.Success<string, Failure>(code);
        }
        #endregion
    }
}